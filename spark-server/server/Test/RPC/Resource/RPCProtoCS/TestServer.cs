// Generated by sprotodump. DO NOT EDIT!
// source: D:\Projects\SparkServer\spark-server\server\Test\RPCCall\Resource\RPCProtoSchema\\TestServer.sproto

using System;
using Sproto;
using System.Collections.Generic;
using System.Collections.Concurrent;

namespace NetSprotoType { 
	public class TestServer_OnRequest : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _request_time; // tag 0
		public Int64 request_time {
			get { return _request_time; }
			set { base.has_field.set_field (0, true); _request_time = value; }
		}
		public bool HasRequest_time {
			get { return base.has_field.has_field (0); }
		}

		private string _request_text; // tag 1
		public string request_text {
			get { return _request_text; }
			set { base.has_field.set_field (1, true); _request_text = value; }
		}
		public bool HasRequest_text {
			get { return base.has_field.has_field (1); }
		}

		public TestServer_OnRequest () : base(max_field_count) {}

		public TestServer_OnRequest (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.request_time = base.deserialize.read_integer ();
					break;
				case 1:
					this.request_text = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.request_time, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_string (this.request_text, 1);
			}

			return base.serialize.close ();
		}
	}


	public class TestServer_OnRequestResponse : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _response_time; // tag 0
		public Int64 response_time {
			get { return _response_time; }
			set { base.has_field.set_field (0, true); _response_time = value; }
		}
		public bool HasResponse_time {
			get { return base.has_field.has_field (0); }
		}

		private string _response_text; // tag 1
		public string response_text {
			get { return _response_text; }
			set { base.has_field.set_field (1, true); _response_text = value; }
		}
		public bool HasResponse_text {
			get { return base.has_field.has_field (1); }
		}

		public TestServer_OnRequestResponse () : base(max_field_count) {}

		public TestServer_OnRequestResponse (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.response_time = base.deserialize.read_integer ();
					break;
				case 1:
					this.response_text = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.response_time, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_string (this.response_text, 1);
			}

			return base.serialize.close ();
		}
	}


}

